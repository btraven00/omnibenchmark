name: CI Pipeline

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  pull_request:
  push:
    branches:
      - main
      - dev

jobs:
  # Step 1: Run code style checks first
  lint:
    name: Code Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Linters
        run: pip install ruff

      - name: Lint with Ruff
        continue-on-error: true
        run: |
          ruff check .

  # Step 2: Run tests only if linting passes
  tests-linux:
    name: Run Tests
    needs: lint
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        poetry-version: ["1.8.0"]
    defaults:
      run:
        shell: bash

    runs-on: ghcr.io/omnibenchmark/omnibenchmark-docker:latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Validate Poetry configuration
        run: poetry check

      - name: Load cached venv
        id: cached-dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies with poetry
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root --extras s3 --extras test

      - name: Install library
        run: poetry install --no-interaction

      - name: Run short tests
        run: |
          poetry run pytest -m short
        if: matrix.os == 'ubuntu-latest'

      # Build wheel after short tests pass
      - name: Build wheel
        run: |
          pip install build
          python -m build .

      # Upload the wheel as an artifact
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: omnibenchmark-wheel
          path: dist/*.whl
          retention-days: 7

      #- name: Run longer tests (integration)
      #  run: |
      #poetry run pytest -m "not short and not conda" --cov=omnibenchmark --cov-report=xml:./reports/coverage.xml \
      #        tests/benchmark tests/cli tests/workflow tests/io
      #  if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
