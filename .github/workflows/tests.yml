name: Tests
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/tests.yml
      - tests/**/*.py
    pull_request:
      paths:
        - .github/workflows/tests.yml
        - tests/**/*.py

jobs:
  run-tests:
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12"]
        poetry-version: ["1.8.0"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --all-extras --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --all-extras --no-interaction
      #----------------------------------------------
      # run test suite and output coverage file
      #----------------------------------------------
      - name: Run tests
        run: |
          poetry run pytest --cov=omni --cov-report=xml:./reports/coverage.xml --junitxml=./reports/junit.xml
      #----------------------------------------------
      # Generate badges
      #----------------------------------------------
      - name: Generate tests & coverage badges
        run: |
          poetry run genbadge tests -i ./reports/junit.xml -o ./reports/tests.svg
          poetry run genbadge coverage -i ./reports/coverage.xml -o ./reports/coverage.svg
      #----------------------------------------------
      # Report coverage
      #----------------------------------------------
      - if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10' &&  matrix.poetry-version == '1.8.0' }}
        name: Comment coverage result
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: ./reports/coverage.xml
